<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class Cron extends MX_Controller
{
    //Required functions in cron.
    //1) Send the current emails from the schedule_email table (every 10 minutes).✔
    //2) Clear the previous slot entries (twice in a day).✔
    //3) Send Review email (every 10 minutes).✔
    //check if current time is at least 2 hours greater than the ride appointment time.
    //if yes then send an email to the user having the review link.

    function __construct()
    {
        parent::__construct();
        $this->load->model('cron_model');
        $this->load->model('appmodel');
        $this->load->library('email');
        $this->load->helper('email_helper');
    }

    function send_schedule_emails()
    {
        $emails = $this->appmodel->get_all_records_simple('schedule_email',array('status' => 0, 'date' => date('Y-m-d')));
        if($emails) {
            foreach ($emails as $email) {
                $this->send_cron_email($email['id'], $email['email'], $email['type'], $email['reservation_id']);
            }
        }
    }

    function delete_previous_slots()
    {
        //clear the slots before the current date.
        //date_default_timezone_set("UTC");
        $cdt = date("Y-m-d", time() - 60 * 60 * 5);
        //$this->appmodel->delete('slot_processing',array('date <' => date('Y-m-d')));
        $this->appmodel->delete('slot_processing',array('date <' => $cdt));
    }

    //detect all the request entries ready to be sent a review form email
    function review_email()
    {
        /*date_default_timezone_set("UTC");*/
        $cdt = date("Y-m-d H:i:s", time() - 60 * 60 * 5);
        //get all the records where status is accepted and date is greater than current time.
        $reservations = $this->appmodel->get_all_records_simple('reservation', array('status' => 'accepted', 'date >' => $cdt, 'date <' => date("Y-m-d H:i:s", strtotime($cdt) + 60 * 60 * 2)));
        if ($reservations) {
            foreach ($reservations as $reservation) {
                $review_exists = $this->appmodel->get_all_records_simple('schedule_email', array('email' => $reservation['email'], 'type' => 'review', 'status' => '1'));
                if (!$review_exists) {
                    //make an entry into the sechedule email table.
                    $this->appmodel->insert('schedule_email', array('email' => $reservation['email'],
                        'type' => 'review', 'reservation_id' => $reservation['id'], 'status' => '0', 'date' => date('Y-m-d')));
                }
            }
        }
    }

    function send_cron_email($email_id,$email_to,$email_type,$reservation_id)
    {
        $data['user'] = $this->appmodel->get_all_records_simple('reservation',array('id' => $reservation_id));//get the reservation data.

        if($email_type == 'accepted')
        {
            $subject = 'Congratulations your ride has been booked';
            $view = 'accepted';
        }
        else if( $email_type == 'rejected')
        {
            $subject = 'Sorry your ride could not be booked';
            $view = 'rejected';
        }
        elseif( $email_type == 'review')
        {
            $subject = 'Thank you for using All Rave Transportation';
            $view = 'review';
        }
        else
        {
            $subject = '';
            $view = '';
        }

        $webmaster = $this->appmodel->get_all_records_simple('config',array('config_key' => 'webmaster_email'));
        $webmaster_email = $webmaster[0]['value'];

        $email_sent = send_email($subject,$webmaster_email,$email_to,$data,$view);

        if($email_sent)
        {
            $this->appmodel->update('schedule_email',array('status' => 1), array('id' => $email_id));
        }
        if($email_type == 'accepted')
        {
            //add the calendar event.
            $this->_set_calendar_event($reservation_id);
        }
    }

    private function _set_calendar_event($reservation_id)
    {
        $reservation = $this->appmodel->get_all_records_simple('reservation',array('id' => $reservation_id));
        $pickup_address = $reservation[0]['pickup_address'];
        $pickup_city = $reservation[0]['pickup_city'];
        $appointment_date = $reservation[0]['date'];
        $title = 'Appointment';

        //$cal_id = 'i77dimnbf8v118tsprka2h5mac@group.calendar.google.com';

        $cal_id = 'm3hhu0mmpbsbr7h08dua2p0428@group.calendar.google.com';//mikemcmay@gmail.com calendar id.
        //uncomment this line in the production website.


        /************************************************
         * Make an API request authenticated with a service
         * account.
         ************************************************/

        require_once 'google-api-php-client/src/Google/autoload.php';
        require_once 'google-api-php-client/src/Google/Client.php';
        require_once 'google-api-php-client/src/Google/Service/Calendar.php';

        //obviously, insert your own credentials from the service account in the Google Developer's console

        //$client_id = '637353149472-m15kipqrg1r13hd1ke6meb57ir8tbl89.apps.googleusercontent.com';

        //uncomment this line in the production website.
        $client_id = '80971229196-voije5o15tcbim4ipekn4gtg8m7o7udo.apps.googleusercontent.com';


        //$service_account_name = '637353149472-m15kipqrg1r13hd1ke6meb57ir8tbl89@developer.gserviceaccount.com';

        //uncomment this line in the production website.
        $service_account_name = '80971229196-voije5o15tcbim4ipekn4gtg8m7o7udo@developer.gserviceaccount.com';


        //the location of the key file .
	
        //$key_file_location = '/home/mikmcm4/allravetransportation.com/demo/test-e7db1fd48348.p12';
        $key_file_location = '/home/mikmcm4/allravetransportation.com/demo/allrave-5e13ec556878.p12'; //uncomment this line in the production website.

        if (!strlen($service_account_name) || !strlen($key_file_location))
            echo missingServiceAccountDetailsWarning();

        $client = new Google_Client();
        $client->setApplicationName("allrave");

        if (isset($_SESSION['service_token'])) {
            $client->setAccessToken($_SESSION['service_token']);
        }

        $key = file_get_contents($key_file_location);
        $cred = new Google_Auth_AssertionCredentials(
            $service_account_name,
            array('https://www.googleapis.com/auth/calendar'),
            $key
        );
        $client->setAssertionCredentials($cred);
        if ($client->getAuth()->isAccessTokenExpired()) {
            $client->getAuth()->refreshTokenWithAssertion($cred);
        }
        $_SESSION['service_token'] = $client->getAccessToken();

        $calendarService = new Google_Service_Calendar($client);

        $createdEvent = $calendarService->events->quickAdd($cal_id, $title.' at '.$pickup_address.
            ' ,'.$pickup_city.' on '.$appointment_date);//April 23rd 10am-10:25am');
        echo $createdEvent->getId();
    }
}
