<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class Requests extends MX_Controller
{

    function __construct()
    {
        parent::__construct();
        $this->load->model('requests_model');
        $this->load->model('appmodel');
        $this->load->helper('url');
        $this->load->library('email');
        $this->load->helper('email_helper');
    }

    //this method shows all the new requests and is also used to show
    // request for a specific date and time.
    function view_requests($date = '',$time = '')
    {
        $this->load->module('layouts');
        $this->load->library('template');
        $this->template->title(
            lang('requests').' - '.$this->config->item('customer_name').' '.$this->config->item('version')
        );

        if(!empty($date) && !empty($time))
        {
            //example time = 0900
            $time = str_split($time,2); //array['09', '00']
            $time = $time[0].':'.$time[1].':00';//09:00:00
            $datetime = $date.' '.$time;
            $data['requests'] = $this->appmodel->get_all_records_simple('reservation',array('date' => $datetime));
            $data['full_slot'] = $this->appmodel->get_all_records_simple('full_slot',array('date' => $date, 'time' => $time));
            $data['admin_padding'] = $this->appmodel->get_all_records_simple('slot_processing',array('date' => $datetime,'reservation_id' => '-1'));
            $data['slot_padding'] = $this->appmodel->get_all_records_simple('slot_processing', array('date' => $datetime));
        }
        else
        {
            $data['requests'] = $this->appmodel->get_records_by_limit('reservation',array(),$limit = 10);
        }

        $data['page'] = lang('requests');
        $this->template
            ->set_layout('users')
            ->build('requests',isset($data) ? $data : NULL);
    }

    function view_request()
    {
        if ($this->uri->segment(3) === FALSE)//check if the id value is present in the url parameters.
        {
            redirect('requests/view_requests');
        }
        else
        {
            $this->load->module('layouts');
            $this->load->library('template');
            $this->template->title(
                lang('requests').' - '.$this->config->item('customer_name').' '.$this->config->item('version')
            );
            $request_id = $this->uri->segment(3);
            $data['page'] = lang('requests');

            $data['request'] = $this->requests_model->get_request($request_id);//get the request data.

            $datetime = $data['request']['date'];
            $date = $this->_convertDate($datetime);
            $time = date("H:i", strtotime($datetime));
            //check for fullslot.
            $data['fullslot'] = $this->appmodel->get_all_records_simple('full_slot',array('date' => $date, 'time' => $time));


            /*date_default_timezone_set("UTC");*/
            $cdt = date("Y-m-d H:i", time() - 60 * 60 * 5);//current cdt time
            $cdt6 = date('Y-m-d H:i:s', strtotime($cdt) + 60 * 60 * 6);//cdt +6 hours.

            if(strtotime($datetime) - strtotime($cdt6) >= 0)//if the datetime for the ride is greater than cdt +6hours then allow the accept and reject actions.
            {
                $data['allow_action'] = TRUE;
            }
            else
            {
                $data['allow_action'] = FALSE;
            }

            $this->template
                ->set_layout('users')
                ->build('request',isset($data) ? $data : NULL);
        }
    }
    
    function process_request()
    {
        $request_id = $this->input->post('request_id');
        $reservation = $this->appmodel->get_all_records_simple('reservation', array('id' => $request_id));
        $accept = $this->input->post('accept');
        $admin = $this->appmodel->get_all_records_simple('config',array('config_key' => 'admin_email'));
        $admin_email = $admin[0]['value'];
        if($accept)
        {
            $this->requests_model->set_request($request_id,'accepted');

            //add the accepted request email to the schedule email table.
            $this->appmodel->insert('schedule_email',array('email' => $reservation[0]['email'],'type' => 'accepted',
                'reservation_id' => $request_id, 'status' => 0,'date' => date('Y-m-d')));

            //add the accept request email to the schedule email table.
            $this->appmodel->insert('schedule_email',array('email' => $admin_email,'type' => 'admin_accepted',
                'reservation_id' => $request_id, 'status' => 0,'date' => date('Y-m-d')));
        }
        else
        {
            $this->requests_model->set_request($request_id,'rejected');
            $this->appmodel->insert('schedule_email',array('email' => $reservation[0]['email'],'type' => 'rejected',
                'reservation_id' => $request_id, 'status' => 0,'date' => date('Y-m-d')));

            $this->appmodel->insert('schedule_email',array('email' => $admin_email,'type' => 'admin_cancelled',
                'reservation_id' => $request_id, 'status' => 0,'date' => date('Y-m-d')));

	        //delete the slots from the slot_processing table.
	        $this->appmodel->delete('slot_processing',array('reservation_id' => $request_id));
	        $this->appmodel->delete('full_slot',array('date' => date('Y-m-d', strtotime($reservation[0]['date'])),'time' => date('H:i:s', strtotime($reservation[0]['date']))));

            $this->appmodel->delete('schedule_email',array('reservation_id' => $request_id,'type' => 'reminder'));
            $this->appmodel->delete('schedule_email',array('reservation_id' => $request_id,'type' => 'admin_reminder'));
        }
        redirect('requests/view_requests');
    }

    function get_request_by_limit()
    {
        $where = '';
        $limit = $this->input->post('limit');
        $type = $this->input->post('type');

        if($type != 'all')
        {
            $where = array('status' => $type);
        }
        $data = $this->appmodel->get_records_by_limit('reservation',$where,$limit);
        echo json_encode($data);
        exit;
    }

    function add_request()
    {
        $this->load->module('layouts');
        $this->load->library('template');
        $this->template->title(
            lang('requests').' - '.$this->config->item('customer_name').' '.$this->config->item('version')
        );
        $request_id = $this->uri->segment(3);
        $data['page'] = lang('requests');

        $data['request'] = $this->requests_model->get_request($request_id);

        //include the form validation library.
        $this->load->library('form_validation');
        $this->form_validation->set_rules('username','Name','trim|required|callback_alpha_space');
        $this->form_validation->set_rules('phone','Phone','trim|required');
        $this->form_validation->set_rules('email', 'Email', 'trim|required|valid_email');
        $this->form_validation->set_rules('pickup_address', 'Pickup Address:', 'trim|required');
        $this->form_validation->set_rules('pickup_city', 'Pickup City', 'trim|required');
        $this->form_validation->set_rules('pickup_state', 'Pickup State', 'trim|required');
        $this->form_validation->set_rules('pickup_zip', 'Pickup Zip', 'trim|required|integer|min_length[5]|max_length[5]');
        $this->form_validation->set_rules('drop_address', 'Drop Address', 'trim|required');
        $this->form_validation->set_rules('drop_city', 'Drop City', 'trim|required');
        $this->form_validation->set_rules('drop_state', 'Drop State', 'trim|required');
        $this->form_validation->set_rules('drop_zip', 'Drop Zip', 'trim|required|integer|min_length[5]|max_length[5]');
        $this->form_validation->set_rules('passenger', 'Passenger', 'trim|required');

        if($this->form_validation->run() == FALSE)
        {
            $this->template
                ->set_layout('users')
                ->build('add_request',isset($data) ? $data : NULL);
        }
        else
        {
	    $datetime = $this->input->post('date_cdt');
	    $date = date('Y-m-d', strtotime($datetime));
	    $time = date('H:i:s', strtotime($datetime));

            /*date_default_timezone_set("UTC");*/
            $booking_time = date("Y-m-d H:i:s", time() - 60 * 60 * 5);//cdt time.
            //check this section later as we might to need to save the booking time as per cdt timezone.


            $data = array(
                'name' => $this->input->post('username'),
                'phone' => $this->input->post('phone'),
                'email' => $this->input->post('email'),
                'date' => $datetime,
                'flight_number' => $this->input->post('flightnumber'),
                'arrival_time' => $this->input->post('usr_time'),
                'pickup_address' => $this->input->post('pickup_address'),
                'pickup_city' => $this->input->post('pickup_city'),
                'pickup_state' => $this->input->post('pickup_state'),
                'pickup_zip' => $this->input->post('pickup_zip'),
                'dropoff_address' => $this->input->post('drop_address'),
                'dropoff_city' => $this->input->post('drop_city'),
                'dropoff_state' => $this->input->post('drop_state'),
                'dropoff_zip' => $this->input->post('drop_zip'),
                'number_of_passengers' => $this->input->post('passenger'),
                'booking_time' => $booking_time
            );

            //$insert = $this->appmodel->insert('reservation',$data);
		$insert_id = $this->appmodel->form_insert($data);

            if($insert_id)
            { //if the data has been saved in the database.
                $data['heading'] = 'Your appointment has not yet been confirmed';
                $user_subject = 'Thank you for your request';
                $webmaster = $this->appmodel->get_all_records_simple('config',array('config_key' => 'webmaster_email'));
                $webmaster_email = $webmaster[0]['value'];

                send_email($user_subject,$webmaster_email,$data['email'],$data,'reservation/email');

                $admin_subject = 'The following request has been posted';
                $data['heading'] = 'The following request has been posted';

                $admin = $this->appmodel->get_all_records_simple('config',array('config_key' => 'admin_email'));
                $admin_email = $admin[0]['value'];

                send_email($admin_subject,$webmaster_email,$admin_email,$data,'reservation/email');
		        $this->_full_slot($date,$time,$insert_id,$data['email']);
                $this->session->set_flashdata('message', 'The data has been saved');

                redirect('requests/add_request');
            }
            else
            { //if the data could not be saved in the database.
                $this->session->set_flashdata('message', 'Your Request could not be saved due to some problem, Kindly try again.');
                redirect('requests/add_request');
            }
        }
    }

    private function _convertDate($date)
    {
        return date('Y-m-d', strtotime($date));
    }

    function alpha_space($str)
    {
        return ( ! preg_match("^[a-zA-Z][a-zA-Z\\s]+$", $str)) ? FALSE : TRUE;
    }

    function get_requests_like()
    {
        $text = $this->input->post('text');
        $type = $this->input->post('type');
        $limit = $this->input->post('limit');
        $where = '';
        if($type != 'all')
        {
            $where = array('status' => $type);
        }
        $result = $this->requests_model->get_requests_like_limit('reservation',$where ,'name',$text, $limit);
        echo json_encode($result);
        exit;
    }

    function get_all_requests()
    {
        $result = $this->appmodel->get_records_by_limit('reservation','',10,'');
        echo json_encode($result);
        exit;
    }

    function get_user_details_by_name()
    {
        $name = $this->input->post('name');
        $result = $this->appmodel->get_like_limit('reservation','name',$name,'10');
        echo json_encode($result);
        exit;
    }

private function _full_slot($date,$time,$request_id,$email)
    {
        $full_slot = $this->appmodel->get_all_records_simple('full_slot',array('date' => $date,'time' => $time));
        if($full_slot)//if fullslot then reject
        {
            //set the status to rejected.
            $this->appmodel->update('reservation',array('status' => 'rejected'),array('id' => $request_id));
            //make an entry in email table.
            $this->appmodel->insert('schedule_email',array('email' => $email,'type' => 'rejected','reservation_id' => $request_id,'status' => 0,'date' => date('Y-m-d')));

        }
        else //if not a fullslot then check for padding effect.
        {
            //add 15 minutes to the time variable and check for the padding effect in slot_processing table.
            //$time15 = date('H:i:s',strtotime("+15minutes", strtotime($time)));
            //$datetime15 = $date.' '.$time15;
            $count_vehicles = $this->appmodel->count_vehicles();
            //$count_slots15 = $this->appmodel->count_where('slot_processing',array('date' => $datetime15));
            //$count_slots = $this->appmodel->count_where('slot_processing',array('date' => $date.' '.$time));
            //$count_slots15 = ($count_slots15) ? count($count_slots15) : 0;
            //$count_slots = ($count_slots) ? count($count_slots) : 0;

            /*if(($count_slots15 == $count_vehicles) || (($count_slots == $count_vehicles)))
            {
                //reject request due to padding.
                //set the status to rejected.
                $this->appmodel->update('reservation',array('status' => 'rejected'),array('id' => $request_id));
                //make an entry in email table.
                $this->appmodel->insert('schedule_email',array('email' => $email,'type' => 'rejected','reservation_id' => $request_id,'status' => 0,'date' => date('Y-m-d')));
            }
            else
            {*/
                //accept the request.
            $admin = $this->appmodel->get_all_records_simple('config',array('config_key' => 'admin_email'));
            $admin_email = $admin[0]['value'];

                $this->appmodel->update('reservation',array('status' => 'accepted'),array('id' => $request_id));
                $this->appmodel->insert('schedule_email',array('email' => $email,'type' => 'accepted','reservation_id' => $request_id,'status' => 0,'date' => date('Y-m-d')));
                $this->appmodel->insert('schedule_email',array('email' => $admin_email,'type' => 'admin_accepted','reservation_id' => $request_id,'status' => 0,'date' => date('Y-m-d')));
                $this->appmodel->insert('schedule_email',array('email' => $admin_email,'type' => 'admin_reminder','reservation_id' => $request_id,'status' => 0,'date' => $date));
                $this->appmodel->insert('schedule_email',array('email' => $email,'type' => 'reminder','reservation_id' => $request_id,'status' => 0,'date' => $date));

                //fill the slot_processing table.
                $currentDate = strtotime($date.' '.$time);
                $currentDate_negative = $currentDate;
                $interval = 0;
                for($i = 0; $i< 8; $i++)
                {
                    $futureDate = $currentDate+(60*$interval);
                    $new_date = date("Y-m-d H:i:s", $futureDate);
                    $data = array('date' => $new_date,'reservation_id' => $request_id);
                    $this->appmodel->insert('slot_processing',$data);
                    $interval +=  15;
                }
                $interval = -15;
                for($i = 8; $i> 0; $i--)
                {
                    $futureDate = $currentDate_negative+(60*$interval);
                    $new_date = date("Y-m-d H:i:s", $futureDate);
                    $data = array('date' => $new_date,'reservation_id' => $request_id);
                    $this->appmodel->insert('slot_processing',$data);
                    $interval -=  15;
                }

                //check if full slot has happened.
                $full_slot = $this->appmodel->get_all_records_simple('reservation',array('date' => $date.' '.$time,'status' => 'accepted'));
                $full_slot_count = ($full_slot) ? count($full_slot) : 0;

                if($full_slot_count == $count_vehicles)
                {
                    //if the full slot has happened then insert it in the full slot table.
                    $this->appmodel->insert('full_slot',array('date' => $date, 'time' => $time));
                }
            //}
        }
    }

}
