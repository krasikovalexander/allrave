<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class Reservation extends MX_Controller {

    function __construct()
    {
        parent::__construct();
        $this->load->model('reservation_model');
        $this->load->model('appmodel');
        $this->load->helper('url');
        $this->load->library('email');
        $this->load->helper('email_helper');
    }

    //This is the default method for the reservation page.
    function index()
    {
        //include the form validation library.
        $this->load->library('form_validation');
        $this->form_validation->set_rules('username','Name','trim|required');
        $this->form_validation->set_rules('phone','Phone','trim|required|min_length[10]');//|max_length[10]');
        $this->form_validation->set_rules('email', 'Email', 'trim|required|valid_email');
        $this->form_validation->set_rules('pickup_address', 'Pickup Address:', 'trim|required');
        $this->form_validation->set_rules('pickup_city', 'Pickup City', 'trim|required');
        $this->form_validation->set_rules('pickup_state', 'Pickup State', 'trim|required');
        $this->form_validation->set_rules('pickup_zip', 'Pickup Zip', 'trim|required|integer|min_length[5]|max_length[5]');
        $this->form_validation->set_rules('drop_address', 'Drop Address', 'trim|required');
        $this->form_validation->set_rules('drop_city', 'Drop City', 'trim|required');
        $this->form_validation->set_rules('drop_state', 'Drop State', 'trim|required');
        $this->form_validation->set_rules('drop_zip', 'Drop Zip', 'trim|required|integer|min_length[5]|max_length[5]');
        $this->form_validation->set_rules('passenger', 'Passenger', 'trim|required|callback_select_validate');

        if($this->form_validation->run() == FALSE) {
            $this->load->view('reservation');
        }
        else{
            $date = $this->input->post('date');
            $date = DateTime::createFromFormat('m-d-Y', $date);
            $date = $date->format('Y-m-d');

            $time = $this->input->post('appointment_time');
            $time = date("H:i:s", strtotime($time));
            $datetime = $date.' '.$time;

            $booking_time = date("Y-m-d H:i:s", time() - 60 * 60 * 5);//current cdt time.

            $data = array(
                'name' => $this->input->post('username'),
                'phone' => $this->input->post('phone'),
                'email' => $this->input->post('email'),
                'date' => $datetime,
                'flight_number' => $this->input->post('flightnumber'),
                'arrival_time' => $this->input->post('usr_time'),
                'pickup_address' => $this->input->post('pickup_address'),
                'pickup_city' => $this->input->post('pickup_city'),
                'pickup_state' => $this->input->post('pickup_state'),
                'pickup_zip' => $this->input->post('pickup_zip'),
                'dropoff_address' => $this->input->post('drop_address'),
                'dropoff_city' => $this->input->post('drop_city'),
                'dropoff_state' => $this->input->post('drop_state'),
                'dropoff_zip' => $this->input->post('drop_zip'),
                'number_of_passengers' => $this->input->post('passenger'),
                'booking_time' => $booking_time
            );

            $subscribe = ($this->input->post('enroll'));
            //enter the user to the subscriber table.
            if($subscribe){
                //make changes here.
                $this->reservation_model->subscriber_check($data['email']);
            }
            $insert_id = $this->reservation_model->form_insert($data);
            if($insert_id){ //if the data has been saved in the database.

                $data['heading'] = 'Your appointment has not yet been confirmed';
                $data['user_subject'] = 'Thank you for your request';
                $webmaster = $this->appmodel->get_all_records_simple('config',array('config_key' => 'webmaster_email'));
                $from = $webmaster[0]['value'];

                send_email($data['user_subject'],$from,$data['email'],$data,'email');

                $data['admin_subject'] = 'The following request has been posted';
                $data['heading'] = 'The following request has been posted';
                $admin = $this->appmodel->get_all_records_simple('config',array('config_key' => 'admin_email'));
                $to =  $admin[0]['value'];
                send_email($data['admin_subject'],$from,$to,$data,'email');

                $this->_full_slot($date,$time,$insert_id,$data['email']);
                $this->session->set_flashdata('message', 'Your Request has been received by us, we will contact you shortly.');
                redirect('reservation/thankyou');

            }else{ //if the data could not be saved in the database.
                $this->session->set_flashdata('message', 'Your Request could not be saved due to some problem, Kindly try again.');
                redirect('reservation/thankyou');
            }
        }
    }

    //This method is used to save the reservation form data into the database.
    function thankyou()
    {
        $this->load->view('message');
    }

    function select_validate($select_val)
    {
        if($select_val=="Number of Passenger"){
	$this->form_validation->set_message('select_validate', 'Please Select The Number Of Passengers.');
	return false;
	} else{
	return true;
	}
    }

    public function getfullslots()
    {
        $date = $this->input->post('date');
        $type = $this->input->post('type');
        $date = $this->_convertDate($date);//convert the date format.
        if($type == 'reservation')
        {
            $slots = $this->appmodel->get_all_records_simple('slot_processing',array('date >=' => $date.' '.'00:00:00', 'date <=' => $date.' '.'23:45:00'));
        }
        else
        {
            $slots = $this->reservation_model->getfullslots($date);
        }

        echo json_encode($slots);
        exit;
    }

    //This method is used to convert the date format from d-m-Y to Y-m-d
    //So that we can search in the database table.
    private function _convertDate($date)
    {
        return date('Y-m-d', strtotime($date));
    }

    private function _full_slot($date,$time,$request_id,$email)
    {
        $full_slot = $this->appmodel->get_all_records_simple('full_slot',array('date' => $date,'time' => $time));
        if($full_slot)//if fullslot then reject
        {
            //set the status to rejected.
            $this->appmodel->update('reservation',array('status' => 'rejected'),array('id' => $request_id));
            //make an entry in email table.
            $this->appmodel->insert('schedule_email',array('email' => $email,'type' => 'rejected','reservation_id' => $request_id,'status' => 0,'date' => date('Y-m-d')));

        }
        else //if not a fullslot then check for padding effect.
        {
            //add 15 minutes to the time variable and check for the padding effect in slot_processing table.
            //$time15 = date('H:i:s',strtotime("+15minutes", strtotime($time)));
            //$datetime15 = $date.' '.$time15;
            $count_vehicles = $this->appmodel->count_vehicles();
            //$count_slots15 = $this->appmodel->count_where('slot_processing',array('date' => $datetime15));
            //$count_slots = $this->appmodel->count_where('slot_processing',array('date' => $date.' '.$time));
            //$count_slots15 = ($count_slots15) ? count($count_slots15) : 0;
            //$count_slots = ($count_slots) ? count($count_slots) : 0;

            /*if(($count_slots15 == $count_vehicles) || (($count_slots == $count_vehicles)))
            {
                //reject request due to padding.
                //set the status to rejected.
                $this->appmodel->update('reservation',array('status' => 'rejected'),array('id' => $request_id));
                //make an entry in email table.
                $this->appmodel->insert('schedule_email',array('email' => $email,'type' => 'rejected','reservation_id' => $request_id,'status' => 0,'date' => date('Y-m-d')));
            }
            else
            {*/
                //accept the request.
            $admin = $this->appmodel->get_all_records_simple('config',array('config_key' => 'admin_email'));
            $admin_email = $admin[0]['value'];

                $this->appmodel->update('reservation',array('status' => 'accepted'),array('id' => $request_id));
                $this->appmodel->insert('schedule_email',array('email' => $email,'type' => 'accepted','reservation_id' => $request_id,'status' => 0,'date' => date('Y-m-d')));
                $this->appmodel->insert('schedule_email',array('email' => $admin_email,'type' => 'admin_accepted','reservation_id' => $request_id,'status' => 0,'date' => date('Y-m-d')));
                $this->appmodel->insert('schedule_email',array('email' => $email,'type' => 'reminder','reservation_id' => $request_id,'status' => 0,'date' => $date));
                $this->appmodel->insert('schedule_email',array('email' => $admin_email,'type' => 'admin_reminder','reservation_id' => $request_id,'status' => 0,'date' => $date));

                //fill the slot_processing table.
                $currentDate = strtotime($date.' '.$time);
                $currentDate_negative = $currentDate;
                $interval = 0;
                for($i = 0; $i< 8; $i++)
                {
                    $futureDate = $currentDate+(60*$interval);
                    $new_date = date("Y-m-d H:i:s", $futureDate);
                    $data = array('date' => $new_date,'reservation_id' => $request_id);
                    $this->appmodel->insert('slot_processing',$data);
                    $interval +=  15;
                }
                $interval = -15;
                for($i = 8; $i> 0; $i--)
                {
                    $futureDate = $currentDate_negative+(60*$interval);
                    $new_date = date("Y-m-d H:i:s", $futureDate);
                    $data = array('date' => $new_date,'reservation_id' => $request_id);
                    $this->appmodel->insert('slot_processing',$data);
                    $interval -=  15;
                }

                //check if full slot has happened.
                $full_slot = $this->appmodel->get_all_records_simple('reservation',array('date' => $date.' '.$time, 'status' => 'accepted'));
                $full_slot_count = ($full_slot) ? count($full_slot) : 0;

                if($full_slot_count == $count_vehicles)
                {
                    //if the full slot has happened then insert it in the full slot table.
                    $this->appmodel->insert('full_slot',array('date' => $date, 'time' => $time));
                }
            //}
        }
    }

    function alpha_space($str)
    {
        return ( ! preg_match("^[a-zA-Z][a-zA-Z\\s]+$", $str)) ? FALSE : TRUE;
    }

    function get_distance_rate()
    {
        $distance = $this->input->post('distance');
        $distance_rate = $this->appmodel->get_all_records_simple('distance_rate',array('bottom <' => $distance, 'top >=' => $distance));
        echo json_encode($distance_rate[0]['price']); //return the price.
        exit;

    }

    function reject()
    {
        //if the appointment is cancelled then.
        //set the status to rejected in the reservation table.
        //delete the slots form the slot processing table.
        //delete the full slot.

        $reservation_id = $this->uri->segment(3);
        $data = $this->appmodel->get_all_records_simple('reservation',array('id' => $reservation_id));
        $type = $data[0]['status'];
        $this->appmodel->update('reservation',array('status' => 'rejected'),array('id' => $reservation_id));

        $data = $this->appmodel->get_all_records_simple('reservation',array('id' => $reservation_id));
        $cdt = date("Y-m-d H:i:s", time() - 60 * 60 * 5);
        $date = $data[0]['date'];
        $admin = $this->appmodel->get_all_records_simple('config',array('config_key' => 'admin_email'));
        $admin_email = $admin[0]['value'];

        if(strtotime($date) - strtotime($cdt) > 21600 && $type == 'accepted') //if there is difference of at least 6 hours.
        {
            $this->appmodel->delete('slot_processing',array('reservation_id' => $reservation_id));
            $this->appmodel->delete('full_slot',array('date' => date('Y-m-d', strtotime($date)), 'time' => date('H:i:s', strtotime($date))));
            $this->appmodel->insert('schedule_email',array('email' => $data[0]['email'],'type' => 'cancelled','reservation_id' => $reservation_id,
                'status' => 0, 'date' => date('Y-m-d')));
            $this->appmodel->insert('schedule_email',array('email' => $admin_email,'type' => 'admin_cancelled','reservation_id' => $reservation_id,
                'status' => 0, 'date' => date('Y-m-d')));
            $this->appmodel->delete('schedule_email',array('reservation_id' => $reservation_id,'type' => 'reminder'));
            $this->appmodel->delete('schedule_email',array('reservation_id' => $reservation_id,'type' => 'admin_reminder'));
           //set the message that the ride has been cancelled.
            $this->session->set_flashdata('message', 'Your booking has been cancelled');
        }
        else //if the difference is less than 6 hours
        {
            //set the message that the ride cannot be cancelled.
            $this->session->set_flashdata('message', 'Your booking cannot be cancelled now, Contact us to cancel your booking');
        }
        $this->load->view('reservation');
    }
}

/* End of file reservation.php */
